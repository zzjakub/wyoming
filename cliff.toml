# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## {{ version | trim_start_matches(pat="v") }} - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## Unreleased
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for group, commits in commits | group_by(attribute="scope") %}
        #### {{ group | upper_first }}
        {% for commit in commits %}
            - {{ commit.message | upper_first }}\
        {% endfor %}
    {% endfor %}\
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features", default_scope = "other" },
    { message = "^fix", group = "Bug Fixes", default_scope = "other" },
    { message = "^doc", group = "Documentation", default_scope = "other" },
    { message = "^perf", group = "Performance", default_scope = "other" },
    { message = "^refactor", group = "Refactor", default_scope = "other" },
    { message = "^style", group = "Styling", default_scope = "other" },
    { message = "^test", group = "Testing", default_scope = "other" },
    { message = "^chore\\(release\\):", skip = true },
    { message = "^chore: release wyoming version", skip = true },
    { message = "^chore", group = "Miscellaneous Tasks", default_scope = "other" },
    { body = ".*security", group = "Security", default_scope = "other" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
